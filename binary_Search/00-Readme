This program generates a sorted list of random integers, allows the user to search for a number using the binary search algorithm, and measures the time taken to perform the search. It also analyzes the runtime for best, average, and worst-case scenarios of binary search.
Prerequisites

    Compiler: A C++ compiler that supports C++11 or later (for the chrono and random number generation features).

    OS: The code can be compiled and run on any system that supports a C++ compiler (Windows, macOS, Linux).

Instructions for Compiling and Running

    Save the Code:

        Copy the code and save it to a file with a .cpp extension, for example, binary_search.cpp.

    Open Terminal (or Command Prompt):

        On Linux/macOS, open the terminal.

        On Windows, open Command Prompt or PowerShell.

    Navigate to the Directory:

        Use the cd command to navigate to the directory where you saved the .cpp file. For example:

    cd path/to/directory

Compile the Code:

    If you're using g++ (part of the GNU Compiler Collection), run the following command to compile the code:

    g++ -o binary_search binary_search.cpp

    This will generate an executable file named binary_search.

Run the Program:

    After compiling, run the program using the following command:

./binary_search

On Windows, the command would be:

        binary_search.exe

    Input and Output:

        The program will first ask you to enter the number of random integers to generate.

        It will then generate the sorted list of random numbers and display them.

        You will be prompted to enter a number to search for.

        The program will show whether the number was found or not and provide the time taken (in microseconds) for the binary search.

        The program will also provide a runtime analysis for the best case, average case, and worst case scenarios.

Code Explanation

    binarySearch(const vector<int>& arr, int target):

        Implements the binary search algorithm to find the index of the target element in the sorted array. If the element is found, it returns the index; otherwise, it returns -1.

    measureTime(const vector<int>& arr, int target, int repeat = 10000):

        Measures the time taken for repeat runs of the binary search function and returns the average time in microseconds.

    main():

        Prompts the user for the number of random integers to generate.

        Generates the random integers, sorts them, and displays them.

        Takes a target number from the user, performs the binary search, and displays the search result along with the time taken.

        Finally, it analyzes the runtime for best, average, and worst-case scenarios by searching for:

            Best Case: The middle element.

            Average Case: A random element in the array.

            Worst Case: An element that is not in the array.

Example Output

Enter number of random integers to generate: 10

Sorted Random Numbers:
5003 6479 13456 17855 19388 25428 26777 30201 47211 99114 

Enter number to search: 19388
Element found at index 4 (0-based indexing).
Time taken (average over 10000 runs): 1.003 microseconds.

--- Binary Search Runtime Analysis ---
Best Case (Middle Element: 17855) - Time: 0.002 microseconds
Average Case (Random Element: 25428) - Time: 0.003 microseconds
Worst Case (Not Found: 300000) - Time: 0.004 microseconds

Notes

    Random Data Generation:

        The program generates n random integers between 1 and 100,000 using the uniform_int_distribution from the C++ standard library. The integers are then sorted in ascending order.

    Binary Search:

        The search operation is performed on the sorted data to ensure binary search operates correctly.

    Time Measurement:

        The program uses chrono::high_resolution_clock to measure the average time taken for binarySearch() over 10,000 runs.

    Runtime Analysis:

        The program checks and displays the time taken for best case (target is the middle element), average case (a random element), and worst case (an element that is not in the array).

Troubleshooting

    Compilation Errors:

        Make sure you're using a C++ compiler that supports C++11 or later, especially for features like chrono, random, and vector.

    Accuracy of Timing:

        The time taken may vary based on the system's performance and other factors like background processes. For more accurate results, run the program multiple times.

